{
  "name": "union",
  "description": "A hybrid buffered / streaming middleware kernel backwards compatible with connect.",
  "version": "0.1.8",
  "author": {
    "name": "Nodejitsu Inc.",
    "email": "info@nodejitsu.com"
  },
  "contributors": [
    {
      "name": "Charlie Robbins",
      "email": "charlie.robbins@gmail.com"
    },
    {
      "name": "Nuno Job",
      "email": "nunojobpinto@gmail.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/flatiron/union.git"
  },
  "dependencies": {
    "pkginfo": "0.2.x",
    "qs": "0.3.2"
  },
  "devDependencies": {
    "ecstatic": "git://github.com/jesusabdullah/node-ecstatic.git",
    "director": "1.x.x",
    "request": "2.x.x",
    "vows": "0.6.x"
  },
  "scripts": {
    "test": "vows test/*-test.js --spec -i"
  },
  "main": "./lib",
  "engines": {
    "node": ">= 0.4.0"
  },
  "readme": "\n<img src=\"https://github.com/flatiron/union/raw/master/union.png\" />\n\n# Synopsis\nA hybrid streaming middleware kernel backwards compatible with connect.\n\n# Motivation\nThe advantage to streaming middlewares is that they do not require buffering the entire stream in order to execute their function.\n\n# Status\n\n[![Build Status](https://secure.travis-ci.org/flatiron/union.png)](http://travis-ci.org/flatiron/union)\n\n# Installation\nThere are a few ways to use `union`. Install the library using npm. You can add it to your `package.json` file as a dependancy\n\n```bash\n  $ [sudo] npm install union\n```\n\n## Usage\nUnion's request handling is [connect](https://github.com/senchalabs/connect)-compatible, meaning that all existing connect middlewares should work out-of-the-box with union.\n\nIn addition, the response object passed to middlewares listens for a \"next\" event, which is equivalent to calling `next()`. Flatiron middlewares are written in this manner, meaning they are not reverse-compatible with connect.\n\n### A simple case\n\n``` js\nvar fs = require('fs'),\n    union = require('../lib'),\n    director = require('director'),\n    favicon = require('./middleware/favicon');\n\nvar router = new director.http.Router();\n\nvar server = union.createServer({\n  before: [\n    favicon('./favicon.png'),\n    function (req, res) {\n      var found = router.dispatch(req, res);\n      if (!found) {\n        res.emit('next');\n      }\n    }\n  ]\n});\n\nrouter.get(/foo/, function () {\n  this.res.writeHead(200, { 'Content-Type': 'text/plain' })\n  this.res.end('hello world\\n');\n});\n\nrouter.post(/foo/, { stream: true }, function () {\n  var req = this.req,\n      res = this.res,\n      writeStream;\n      \n  writeStream = fs.createWriteStream(Date.now() + '-foo.txt');\n  req.pipe(writeStream);\n  \n  writeStream.on('close', function () {\n    res.writeHead(200, { 'Content-Type': 'text/plain' });\n    res.end('wrote to a stream!');\n  });\n});\n\nserver.listen(9090);\nconsole.log('union with director running on 9090');\n```\n\nTo demonstrate the code, we use [director](https://github.com/flatiron/director). A light-weight, Client AND Server side URL-Router for Node.js and Single Page Apps!\n\n# API\n\n## union Static Members\n\n### createServer(options)\nThe `options` object is required. Options include:\n\nSpecification\n\n```\n  function createServer(options)\n\n  @param options {Object} \n  An object literal that represents the configuration for the server.\n    \n    @option before {Array} \n    The `before` value is an array of middlewares, which are used to route and serve incoming \n    requests. For instance, in the example, `favicon` is a middleware which handles requests \n    for `/favicon.ico`.\n\n    @option after {Array} \n    The `after` value is an array of stream filters, which are applied after the request handlers \n    in `options.before`. Stream filters inherit from `union.ResponseStream`, which implements the \n    Node.js core streams api with a bunch of other goodies.\n\n    @option limit {Object} \n    (optional) A value, passed to internal instantiations of `union.BufferedStream`.\n\n    @option https {Object} \n    (optional) A value that specifies the certificate and key necessary to create an instance of \n    `https.Server`.\n\n    @option headers {Object} \n    (optional) An object representing a set of headers to set in every outgoing response\n```\n\nExample\n\n```js\nvar server = union.createServer({\n  before: [\n    favicon('./favicon.png'),\n    function (req, res) {\n      var found = router.dispatch(req, res);\n      if (!found) {\n        res.emit('next');\n      }\n    }\n  ]\n});\n```\n\nAn example of the `https` option.\n\n``` js\n{\n  https: {\n    cert: 'path/to/cert.pem',\n    key: 'path/to/key.pem',\n    ca: 'path/to/ca.pem'\n  }\n}\n```\n\nAn example of the `headers` option.\n\n``` js\n{\n  'x-powered-by': 'your-sweet-application v10.9.8'\t\n}\n```\n\n## BufferedStream Constructor\nThis constructor inherits from `Stream` and can buffer data up to `limit` bytes. It also implements `pause` and `resume` methods.\n\nSpecification\n\n```\n  function BufferedStream(limit)\n  \n  @param limit {Number} \n  the limit for which the stream can be buffered\n```\n\nExample\n\n```js\nvar bs = union.BufferedStream(n);\n```\n\n## HttpStream Constructor\nThis constructor inherits from `union.BufferedStream` and returns a stream with these extra properties:\n\nSpecification\n\n```\n  function HttpStream()\n```\n\nExample\n\n```js\nvar hs = union.HttpStream();\n```\n\n## HttpStream Instance Memebers\n\n### url\nThe url from the request.\n\nExample\n\n```js\nhttpStream.url = '';\n```\n\n### headers\nThe HTTP headers associated with the stream.\n\nExample\n\n```js\nhttpStream.headers = '';\n``` \n\n### method\nThe HTTP method (\"GET\", \"POST\", etc).\n\nExample\n\n```js\nhttpStream.method = 'POST';\n```\n\n### query\nThe querystring associated with the stream (if applicable).\n\nExample\n\n```js\nhttpStream.query = '';\n```\n\n## ResponseStream Constructor\nThis constructor inherits from `union.HttpStream`, and is additionally writeable. Union supplies this constructor as a basic response stream middleware from which to inherit.\n\nSpecification\n\n```\n  function ResponseStream()\n```\n\nExample\n\n```js\nvar rs = union.ResponseStream();\n```\n\n# Tests\n\nAll tests are written with [vows][0] and should be run with [npm][1]:\n\n``` bash\n  $ npm test\n```\n\n# Licence\n\n(The MIT License)\n\nCopyright (c) 2010 Nodejitsu Inc. <http://www.twitter.com/nodejitsu>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n[0]: http://vowsjs.org\n[1]: http://npmjs.org\n",
  "readmeFilename": "README.md",
  "_id": "union@0.1.8",
  "_from": "union@0.1.x"
}
